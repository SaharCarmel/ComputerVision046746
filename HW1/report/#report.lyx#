#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\begin_preamble
\usepackage{amsmath}
\usepackage{amsthm}
\usepackage{amssymb}
\usepackage{polyglossia}
\usepackage{titlesec}
\usepackage{wrapfig}
%\usepackage{pygmentize}
%\usepackage{minted}
\usepackage[all]{xy}
\usepackage[bottom]{footmisc}

\addtolength{\skip\footins}{2pc plus 5pt}

\AtBeginDocument{
\renewcommand\footnoterule{%
  \kern -3pt
  \hbox to \textwidth{\hfill\vrule height 0.4pt width .4\textwidth}
  \kern 2.6pt
}}
\end_preamble
\use_default_options true
\begin_modules
theorems-ams-chap-bytype
\end_modules
\maintain_unincluded_children false
\language american
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "Frank Ruehl CLM"
\font_sans "default" "Simple CLM"
\font_typewriter "default" "Miriam Mono CLM"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts true
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 1
\bibtex_command default
\index_command default
\float_placement H
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 3cm
\topmargin 3cm
\rightmargin 3cm
\bottommargin 3cm
\secnumdepth 3
\tocdepth 2
\paragraph_separation skip
\defskip smallskip
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title

\lang english
Computer Vision 046746
\begin_inset Newline newline
\end_inset

HW 01
\end_layout

\begin_layout Standard
\align center

\lang english
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\lang english
Sahar Carmel
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\numeric on
\lang hebrew
305554453
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\lang english
Nadav Gelfer
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\numeric on
\lang hebrew
304849821
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard

\lang english
\begin_inset FormulaMacro
\newcommand{\dg}{^{\circ}}
\end_inset


\end_layout

\begin_layout Section
Keypoint detector
\end_layout

\begin_layout Subsection*
Summary
\end_layout

\begin_layout Standard
After loading the image, converting to gray and normalizing we created the
 DoG pyramid using the provided code.
 To implement Q1.4, we used 
\begin_inset Formula $cv2.Sobel$
\end_inset

 to calculate 
\begin_inset Formula $D_{xx},D_{yy}$
\end_inset

 and 
\begin_inset Formula $D_{xy}$
\end_inset

 for each level of the pyramid.
 Using the derivative matrix, we calculated the curvature ratio, 
\begin_inset Formula $R$
\end_inset

, pixelwise and stored the results.
 
\end_layout

\begin_layout Standard
In order to implement Q1.5 with reasonable complexity, we used masks to filter
 possible extrema points which do not satisfy the 
\begin_inset Formula $\theta_{c}$
\end_inset

 and 
\begin_inset Formula $\theta_{r}$
\end_inset

 threshold.
 Such approach was required because the implementation of spatial extrema
 point detection has far greater complexity, and because we found empirically
 that only about 
\begin_inset Formula $10\%-15\%$
\end_inset

 of the extrema point satisfy both thresholds.
\end_layout

\begin_layout Standard
Q1.6 simply wraps all of the implemented functions.
\end_layout

\begin_layout Subsection
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard
The loaded image is simply:
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename media/1.1.png
	lyxscale 50
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Loaded image
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
We've used 
\begin_inset Formula $cv2.cvtColor$
\end_inset

 to transform from 
\begin_inset Formula $BGR$
\end_inset

 layout to 
\begin_inset Formula $RGB$
\end_inset

.
\end_layout

\begin_layout Subsection
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard
We converted the image to grayscale using 
\begin_inset Formula $cv2.cvtColor$
\end_inset

 and normalized its values to 
\begin_inset Formula $\left[0,1\right]$
\end_inset

 using division by 
\begin_inset Formula $255$
\end_inset

.
\end_layout

\begin_layout Standard
Using the attached function we receive the following pyramid:
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename media/1.2.png
	lyxscale 50
	scale 45

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Gaussian pyramid
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The shape of the GaussianPyramid matrix is 
\begin_inset Formula $1\times\text{len}\left(levels\right)$
\end_inset

 where each element is of size 
\begin_inset Formula $imH\times imW$
\end_inset

.
\end_layout

\begin_layout Subsection
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard
The output pyramid is as follows:
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename media/1.3.png
	lyxscale 50
	scale 45

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Difference of Gaussian pyramid
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Where each element is received by simply substracting the previous level.
 
\end_layout

\begin_layout Standard
The shape of the matrix is similar to that of the Gaussian pyramid and differs
 only by having one less level due to the nature of the calculation, namely
 
\begin_inset Formula $1\times\left(\text{len}\left(levels\right)-1\right)$
\end_inset

 where each element is of size 
\begin_inset Formula $imH\times imW$
\end_inset

.
\end_layout

\begin_layout Subsection
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard
We used a Sobel filter with a kernel size of 3 to calculate the derivatives
 
\begin_inset Formula $D_{xx},D_{yy}$
\end_inset

 and 
\begin_inset Formula $D_{xy}$
\end_inset

.
 Then we calculated the curvature ratio, 
\begin_inset Formula $R$
\end_inset

, pixelwise for each level.
\end_layout

\begin_layout Standard
To avoid division by zero in the case of 
\begin_inset Formula $\det\left(H\right)=0$
\end_inset

, we set the value of 
\begin_inset Formula $\det\left(H\right)$
\end_inset

 to 
\begin_inset Formula $numpy$
\end_inset

's epsilon in such case.
\end_layout

\begin_layout Subsection
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard
In order to satisfy both thresholds and find all spatial extremums, we've
 used masks:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Python,numbers=left"
inline false
status open

\begin_layout Plain Layout

mask_c = np.abs(im) > th_contrast         
\end_layout

\begin_layout Plain Layout

mask_r = np.abs(PrincipalCurvature[level]) < th_r         
\end_layout

\begin_layout Plain Layout

mask_unified = mask_c & mask_r
\end_layout

\begin_layout Plain Layout

valid_pixels = np.where(mask_unified == True)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Using masks allowed us to skip the costly action of calculating a 10-neighborhoo
d extrema for each pixel in the image by allowing us to loop over a much
 smaller set of pixels which satisfy both thresholds.
\end_layout

\begin_layout Standard
For each pixel that satisfies both thresholds, we considered the pixel an
 extrema point if it was either the maximum or the minimum of it's neighbors.
 
\end_layout

\begin_layout Subsection
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard
Detected keypoints for the input image 
\begin_inset Formula $model\text{{\text{\_}}}chickenbroth.jpg$
\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename media/1.6_chicken.png
	lyxscale 50
	scale 30

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Keypoints for input image 
\begin_inset Formula $model\text{{\text{\_}}}chickenbroth.jpg$
\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Using the same code for 
\begin_inset Formula $pf{\text{\_}}pile.jpg$
\end_inset

 yields the following result:
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename media/1.6_pile.png
	lyxscale 50
	scale 30

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Keypoints for input image 
\begin_inset Formula $pf{\text{\_}}pile.jpg$
\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Using a picture we've taken outside and resized to 
\begin_inset Formula $512\times512$
\end_inset

 we get:
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename media/1.6_ourpic_plain.png
	lyxscale 50
	scale 35

\end_inset


\begin_inset Graphics
	filename media/1.6_ourpic.png
	lyxscale 50
	scale 35

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Our image and it's keypoints, side by side
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
From the above samples it's obvious that there are many keypoints and not
 all of them describe a desirable feature.
 In order to improve the results, we used a Gaussian blur filter to smoothen
 the image.
 Such action reduces the effect of noise and further enhances the detection
 of corners over edges.
 The same picture we've taken after applying 
\begin_inset Formula $cv2.GaussianBlur$
\end_inset

 yields the following results:
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename media/1.6_ourpic_blur.png
	lyxscale 50
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Our image and it's keypoints after applying Gaussian blur
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The effect of the blur shows quite well using a simple polygons picture
 that was posted on Facebook:
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename media/polygons_blur.png
	lyxscale 50
	scale 25

\end_inset


\begin_inset Graphics
	filename media/polygons_noblur.png
	lyxscale 50
	scale 25

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Keypoints for the blurred picture compared to the non-blurred picture
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This image demonstrates quite well how smoothing the picture using a Gaussian
 blur eliminates most false detections which occur due to noise and pixelation
 along the edges of the polygons.
\end_layout

\begin_layout Standard
The effect is shown easily by comparing the corner of the orange square
 zoomed in:
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename media/edge_blur.png
	lyxscale 50
	scale 25

\end_inset


\begin_inset Formula $\quad\quad$
\end_inset


\begin_inset Graphics
	filename media/edge_not_blur.png
	lyxscale 50
	scale 25

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Blurred corner compared to the original corner
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
BRIEF descriptor
\end_layout

\begin_layout Subsection*
Summary
\end_layout

\begin_layout Standard
Something
\end_layout

\begin_layout Subsection
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard
We've chosen to randomize our 
\begin_inset Formula $X,Y$
\end_inset

 coordinates using a uniform distribution.
 We used 
\begin_inset Formula $numpy.random.randit$
\end_inset

 for both 
\begin_inset Formula $X$
\end_inset

 and Y with a lower bound of 
\begin_inset Formula $-patchWidth/2$
\end_inset

 and an upper bound of 
\begin_inset Formula $patchWidth/2$
\end_inset

.
 
\end_layout

\begin_layout Subsection
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard
...
\end_layout

\begin_layout Subsection
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $briefLite$
\end_inset

 is simply a wrapper of previously implemented functions.
 It first loads the 
\begin_inset Formula $testPattern$
\end_inset

 matrix, calls 
\begin_inset Formula $DoGdetector$
\end_inset

 which we implemented in part A and then calls 
\begin_inset Formula $computeBrief$
\end_inset

 to compute 
\begin_inset Formula $locs$
\end_inset

 and 
\begin_inset Formula $desc$
\end_inset

.
\end_layout

\begin_layout Subsection
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard
First we'll match couple of the chicken broth pictures:
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename media/chicken3_4.png
	lyxscale 50
	scale 40

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset Formula $chickenbroth{\text{\_}}03.jpg$
\end_inset

 and 
\begin_inset Formula $chickenbroth{\text{\_}}04.jpg$
\end_inset

 matching
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Since both cans are facing almost the same direction, we get pretty good
 matching.
 We see most of the text matches as well as the edge of the cup in the middle.
\end_layout

\begin_layout Standard
Moving forward to the next couple:
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename media/inclineL_R.png
	lyxscale 50
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset Formula $incline{\text{\_}}L.jpg$
\end_inset

 and 
\begin_inset Formula $incline{\text{\_}}R.jpg$
\end_inset

 matching
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
We can see most of the bridge keypoints are matching to one another and
 also good matchin of the high tower.
 However, we do see that we get matches for different buildings that are
 to the right of the tower in one picture and are to the left in ther other.
\end_layout

\begin_layout Standard
We did 3 test cases for the Computer Vision book in varying degrees of difficult
y:
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename media/bookdesk_stand.png
	lyxscale 50
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset Formula $pf{\text{\_}}desk.jpg$
\end_inset

 and 
\begin_inset Formula $pf{\text{\_}}stand.jpg$
\end_inset

 matching
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The simplest match is between the book laying on the desk and the book standing.
 Both images are in the same direction even though there is a slight difference
 in their angle towards us.
 We can see that indeed we have good matching of both the text and the picture
 on the cover.
 
\end_layout

\begin_layout Standard
Trying for a harder case, we tested the same desk picture against the picture
 containing all 3 books:
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename media/book1_3.png
	lyxscale 50
	scale 40

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset Formula $pf{\text{\_}}desk.jpg$
\end_inset

 and 
\begin_inset Formula $pf{\text{\_}}floor.jpg$
\end_inset

 matching
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
In this test we see that while we do have a few matches for the two books
 which don't appear in the desk image, most of the matches are between the
 Computer Vision books and once again they match quite well the text and
 the cover picture.
\end_layout

\begin_layout Standard
Our last test was of the same picture rotated:
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename media/book_rot.png
	lyxscale 50
	scale 45

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset Formula $pf{\text{\_}}floor.jpg$
\end_inset

 and 
\begin_inset Formula $pf{\text{\_}}floor{\text{\_}}rot.jpg$
\end_inset

 matching
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
We can see that even with a 
\begin_inset Formula $90\dg$
\end_inset

 rotation, we match most keypoints.
\end_layout

\begin_layout Standard
Judging by the five test cases above, we believe that we get good matches
 for the books and the chicken broth images because they have far less descripto
rs than the incline images.
 The incline image is far more crowded and thus resulting in higher number
 of descriptors which in turn gets matched to close but different descriptors.
\end_layout

\begin_layout Subsection
Bonus
\end_layout

\begin_layout Standard
Using 
\begin_inset Formula $10\dg$
\end_inset

 rotation, we have received the following...
\end_layout

\end_body
\end_document
